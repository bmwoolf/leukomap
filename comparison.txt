UConn/paper- manual pattern discovery

RAW DATA INPUT
â”œâ”€â”€ SRA Accessions (PRJNA548203)
â”œâ”€â”€ 11 samples: 3 healthy (PBMMC_1,2,3) + 8 cancer (ETV6-RUNX1_1-4, HHD_1-2, PRE-T_1-2)
â””â”€â”€ FASTQ files (3 files per sample: cell barcodes, UMIs, cDNA reads)

    â†“
    
ðŸ”§ DATA PROCESSING PIPELINE (HPC/SLURM)
â”œâ”€â”€ 01_download.sh
â”‚   â”œâ”€â”€ Input: metadata.csv (SRA IDs)
â”‚   â”œâ”€â”€ Function: fasterq-dump(sra_id, threads=6, split_files=True)
â”‚   â”œâ”€â”€ Output: 33 FASTQ files (11 samples Ã— 3 files each)
â”‚   â””â”€â”€ Resources: 6 cores, 8GB RAM per sample
â”‚
â”œâ”€â”€ 02_fastqc_raw.sh  
â”‚   â”œâ”€â”€ Input: FASTQ files
â”‚   â”œâ”€â”€ Function: fastqc(fastq_file, quality_metrics=True)
â”‚   â”œâ”€â”€ Output: HTML quality reports
â”‚   â””â”€â”€ Resources: 6 cores, 8GB RAM per sample
â”‚
â”œâ”€â”€ 03_multiqc_raw.sh
â”‚   â”œâ”€â”€ Input: FastQC reports
â”‚   â”œâ”€â”€ Function: multiqc(aggregate_reports=True)
â”‚   â”œâ”€â”€ Output: Combined quality report
â”‚   â””â”€â”€ Resources: 1 core, 8GB RAM
â”‚
â””â”€â”€ 04_star_ensembl.sh âš¡ (CPU KILLER)
    â”œâ”€â”€ Input: FASTQ files + Human genome (GRCh38) + Cell barcode whitelist
    â”œâ”€â”€ Function: STAR(genome_dir, read_files, solo_type="CB_UMI_Simple")
    â”œâ”€â”€ Output: BAM files + Gene count matrices
    â””â”€â”€ Resources: 8 cores, 64GB RAM per sample (1-2 hours each)

    â†“
    
DOWNSTREAM ANALYSIS (Jupyter Notebooks)
â”œâ”€â”€ 06_annotation.ipynb
â”‚   â”œâ”€â”€ Input: Processed count matrices
â”‚   â”œâ”€â”€ Functions:
â”‚   â”‚   â”œâ”€â”€ sc.read_h5ad("07_analysis.h5ad")
â”‚   â”‚   â”œâ”€â”€ sc.pp.normalize_total(adata, target_sum=10^4)
â”‚   â”‚   â”œâ”€â”€ sc.pp.log1p(adata)
â”‚   â”‚   â”œâ”€â”€ celltypist.annotate(adata, model="Immune_All_High.pkl")
â”‚   â”‚   â””â”€â”€ sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)
â”‚   â”œâ”€â”€ Output: AnnData object with cell type annotations
â”‚   â””â”€â”€ Cell Types: B cells, T cells, Monocytes, B-cell lineage, Erythroid cells, etc.
â”‚
â”œâ”€â”€ 07_diff_exp.ipynb
â”‚   â”œâ”€â”€ Input: Annotated AnnData object
â”‚   â”œâ”€â”€ Functions:
â”‚   â”‚   â”œâ”€â”€ aggregate_and_filter(adata, cell_identity="T_cells", min_cells=30)
â”‚   â”‚   â”œâ”€â”€ edgeR::DGEList(counts=counts_matrix, group=conditions)
â”‚   â”‚   â”œâ”€â”€ edgeR::estimateDisp(dge)
â”‚   â”‚   â”œâ”€â”€ edgeR::exactTest(dge, pair=c("healthy", "cancer"))
â”‚   â”‚   â””â”€â”€ limma::topTable(fit, coef=2, n=Inf)
â”‚   â”œâ”€â”€ Output: Differential expression results
â”‚   â””â”€â”€ Results: 5,584 DE genes (healthy vs cancer), 3,283 DE genes (cancer subtypes)
â”‚
â””â”€â”€ 08_r_plotting.ipynb
    â”œâ”€â”€ Input: AnnData object
    â”œâ”€â”€ Functions:
    â”‚   â”œâ”€â”€ sceasy::convertFormat(adata, from="anndata", to="seurat")
    â”‚   â”œâ”€â”€ Seurat::RunUMAP(data, dims=1:10)
    â”‚   â””â”€â”€ Seurat::DimPlot(data, reduction="umap", group.by="sample")
    â”œâ”€â”€ Output: UMAP visualizations
    â””â”€â”€ Plots: Cell type clusters, sample distribution, condition comparison

    â†“
    
FINAL OUTPUTS
â”œâ”€â”€ Statistical Results:
â”‚   â”œâ”€â”€ 5,584 differentially expressed genes (healthy vs cancer)
â”‚   â”œâ”€â”€ 3,283 differentially expressed genes (cancer subtypes)
â”‚   â”œâ”€â”€ Top genes: MYO7B (-6.5 logFC), CASC15 (-5.2 logFC), TPO (+10.3 logFC)
â”‚   â””â”€â”€ Cell type distributions across conditions
â”‚
â”œâ”€â”€ Visualizations:
â”‚   â”œâ”€â”€ UMAP plots showing cell type clusters
â”‚   â”œâ”€â”€ Sample distribution plots
â”‚   â”œâ”€â”€ Condition comparison plots
â”‚   â””â”€â”€ Quality control metrics
â”‚
â””â”€â”€ Data Objects:
    â”œâ”€â”€ 07_analysis.h5ad (processed AnnData object)
    â”œâ”€â”€ Cell type annotations (CellTypist predictions)
    â”œâ”€â”€ Differential expression tables
    â””â”€â”€ Processed count matrices





Deep Learning- auto pattern discovery

Raw 10x Data (data/raw/*)
    â†“
load_data(data_path: str) â†’ AnnData
    â†“
PreprocessingPipeline.process(adata: AnnData) â†’ AnnData
    â”œâ”€â”€ _filter_cells(min_genes: int, max_counts: int) â†’ AnnData
    â”œâ”€â”€ _filter_genes(min_cells: int) â†’ AnnData  
    â”œâ”€â”€ sc.pp.normalize_total(target_sum: int) â†’ AnnData
    â”œâ”€â”€ sc.pp.log1p() â†’ AnnData
    â”œâ”€â”€ data.layers['scvi_input'] = data.X.copy() â†’ Store for scVI
    â”œâ”€â”€ sc.pp.highly_variable_genes(n_top_genes: int) â†’ AnnData
    â”œâ”€â”€ data.raw = data.copy() â†’ Store full dataset
    â”œâ”€â”€ data = data[:, highly_variable_genes] â†’ Subset
    â””â”€â”€ sc.pp.scale(max_value: int) â†’ AnnData (for PCA/UMAP)
    â†“
Diagnostics Check â†’ Validate data quality
    â”œâ”€â”€ Check adata.X (scaled) for NaNs/Infs
    â””â”€â”€ Check adata.layers['scvi_input'] (non-negative) for scVI
    â†“
SCVITrainer.process(adata: AnnData) â†’ SCVI Model
    â”œâ”€â”€ setup_scvi_data(adata, batch_key: str, layer: 'scvi_input') â†’ AnnData
    â””â”€â”€ train_scvi_model(
            n_latent: int,
            n_hidden: int, 
            n_layers: int,
            dropout_rate: float,
            batch_size: int,
            max_epochs: int,
            learning_rate: float,
            gpu_id: int
        ) â†’ SCVI Model
    â†“
generate_embeddings(model: SCVI, adata: AnnData) â†’ AnnData
    â”œâ”€â”€ model.get_latent_representation() â†’ np.array
    â”œâ”€â”€ adata.obsm['X_scVI'] = latent â†’ Store embeddings
    â”œâ”€â”€ sc.pp.neighbors(use_rep='X_scVI', n_neighbors: int) â†’ AnnData
    â”œâ”€â”€ sc.tl.umap() â†’ AnnData
    â””â”€â”€ sc.tl.leiden(resolution: float) â†’ AnnData
    â†“
AutoCellTypeLabeler.run_annotation_pipeline(adata_path: str) â†’ DataFrame
    â”œâ”€â”€ Load adata from temp file
    â”œâ”€â”€ Try CellTypist models (Immune_All_Low.pkl, etc.)
    â”œâ”€â”€ Fallback to mock annotations if all fail
    â””â”€â”€ Return cell type predictions
    â†“
Advanced Analysis Pipeline
    â”œâ”€â”€ run_pseudotime_analysis(adata: AnnData) â†’ AnnData
    â”œâ”€â”€ run_differential_expression(adata: AnnData) â†’ DataFrame
    â”œâ”€â”€ run_python_gsea(adata: AnnData) â†’ DataFrame
    â””â”€â”€ query_drug_databases(deg_results: DataFrame) â†’ DataFrame
    â†“
Visualization Pipeline
    â”œâ”€â”€ LeukoMapVisualizer.create_comprehensive_report() â†’ Figures
    â””â”€â”€ Save plots to output_dir/figures/
    â†“
Export Results
    â”œâ”€â”€ Save AnnData objects (.h5ad)
    â”œâ”€â”€ Save analysis reports (.txt, .md)
    â””â”€â”€ Save visualizations (.png)